{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Jess Event Manager",
    "description": "My event manager API for a Bootcamp project"
  },
  "host": "jess-event-system.herokuapp.com",
  "basePath": "/v1",
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "UserToken": {
      "type": "apiKey",
      "in": "header",
      "name": "x-access-token"
    }
  },
  "paths": {
    "/users/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login a user",
        "description": "Logs in a registered user.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [{
            "in": "formData",
            "name": "email",
            "type": "string",
            "format": "email",
            "required": true
          },
          {
            "in": "formData",
            "name": "password",
            "type": "string",
            "format": "password",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User does not  Exists"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/users/": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register a user",
        "description": "Registers a new user.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [{
            "in": "formData",
            "name": "surname",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "firstName",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "email",
            "type": "string",
            "format": "email",
            "required": true
          },
          {
            "in": "formData",
            "name": "password",
            "type": "string",
            "format": "password",
            "required": true
          },
          {
            "in": "formData",
            "name": "confirmPassword",
            "type": "string",
            "format": "password",
            "required": true
          },
          {
            "in": "formData",
            "name": "isAdmin",
            "type": "boolean",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "User exists"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": ["Events"],
        "summary": "Get all events event",
        "description": "Get all events in the database.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": ["Events"],
        "summary": "Creates a new event",
        "description": "Creates a new events and stores it to the database.",
        "parameters": [{
          "name": "event",
          "in": "body",
          "description": "The event to create.",
          "schema": {
            "$ref": "#/definitions/Event"
          }
        }],
        "security": [{
          "UserToken": []
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets an event",
        "description": "Get an event by in the database.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "The event to get."
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": ["Events"],
        "summary": "Update an event",
        "description": "Update an existing event in the database.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "The event id to update."
        }, {
          "name": "event",
          "in": "body",
          "description": "The changes to make.",
          "schema": {
            "$ref": "#/definitions/Event"
          }
        }],
        "security": [{
          "UserToken": []
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Delete an event",
        "description": "Delete an existing event from the database.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "The event to delete."
        }],
        "security": [{
          "UserToken": []
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/centers": {
      "get": {
        "tags": ["Centers"],
        "summary": "Gets all center",
        "description": "gets all center in the database.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": ["Centers"],
        "summary": "Creates a center",
        "description": "Creates a new center and stores to the database.",
        "parameters": [{
          "name": "center",
          "in": "body",
          "description": "The center to create.",
          "schema": {
            "$ref": "#/definitions/Center"
          }
        }],
        "security": [{
          "UserToken": []
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "centers/{id}": {
      "get": {
        "tags": ["Centers"],
        "summary": "gets a single center",
        "description": "gets a center and adds to the database.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "The center to retrieve by ID."
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": ["Centers"],
        "summary": "Modifies a center",
        "description": "modifies a center and saves it to the database.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "The center to update."
        }, {
          "name": "center",
          "in": "body",
          "description": "The changes to make.",
          "schema": {
            "$ref": "#/definitions/Center"
          }
        }],
        "security": [{
          "UserToken": []
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Centers"],
        "summary": "Delete a center",
        "description": "Delete an existing center from the database.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "The center to delete."
        }],
        "security": [{
          "UserToken": []
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "Event": {
      "required": [
        "name",
        "location",
        "startDate",
        "endDate"
      ],
      "properties": {
        "name": {
          "type": "string",
          "uniqueItems": true
        },
        "location": {
          "type": "integer"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    },
    "Center": {
      "required": [
        "name",
        "location"
      ],
      "properties": {
        "name": {
          "type": "string",
          "uniqueItems": true
        },
        "location": {
          "type": "string"
        },
        "facilities": {
          "type": "string"
        },
        "state": {
          "type": "integer"
        },
        "image": {
          "type": "string"
        }
      }
    }
  }
}
